package com.sforce.soap.enterprise;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class RecordTypeCompactLayoutMapping implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public RecordTypeCompactLayoutMapping() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : available of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean available__is_set = false;

    private boolean available;

    public boolean getAvailable() {
      return available;
    }

    public boolean isAvailable() {
      return available;
    }

    public void setAvailable(boolean available) {
      this.available = available;
      available__is_set = true;
    }

    protected void setAvailable(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("available", "urn:enterprise.soap.sforce.com","available","http://www.w3.org/2001/XMLSchema","boolean",1,1,true))) {
        setAvailable(__typeMapper.readBoolean(__in, _lookupTypeInfo("available", "urn:enterprise.soap.sforce.com","available","http://www.w3.org/2001/XMLSchema","boolean",1,1,true), boolean.class));
      }
    }

    private void writeFieldAvailable(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("available", "urn:enterprise.soap.sforce.com","available","http://www.w3.org/2001/XMLSchema","boolean",1,1,true), available, available__is_set);
    }

    /**
     * element : compactLayoutId of type {urn:enterprise.soap.sforce.com}ID
     * java type: java.lang.String
     */
    private boolean compactLayoutId__is_set = false;

    private java.lang.String compactLayoutId;

    public java.lang.String getCompactLayoutId() {
      return compactLayoutId;
    }

    public void setCompactLayoutId(java.lang.String compactLayoutId) {
      this.compactLayoutId = compactLayoutId;
      compactLayoutId__is_set = true;
    }

    protected void setCompactLayoutId(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("compactLayoutId", "urn:enterprise.soap.sforce.com","compactLayoutId","urn:enterprise.soap.sforce.com","ID",1,1,true))) {
        setCompactLayoutId(__typeMapper.readString(__in, _lookupTypeInfo("compactLayoutId", "urn:enterprise.soap.sforce.com","compactLayoutId","urn:enterprise.soap.sforce.com","ID",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldCompactLayoutId(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("compactLayoutId", "urn:enterprise.soap.sforce.com","compactLayoutId","urn:enterprise.soap.sforce.com","ID",1,1,true), compactLayoutId, compactLayoutId__is_set);
    }

    /**
     * element : compactLayoutName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean compactLayoutName__is_set = false;

    private java.lang.String compactLayoutName;

    public java.lang.String getCompactLayoutName() {
      return compactLayoutName;
    }

    public void setCompactLayoutName(java.lang.String compactLayoutName) {
      this.compactLayoutName = compactLayoutName;
      compactLayoutName__is_set = true;
    }

    protected void setCompactLayoutName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("compactLayoutName", "urn:enterprise.soap.sforce.com","compactLayoutName","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setCompactLayoutName(__typeMapper.readString(__in, _lookupTypeInfo("compactLayoutName", "urn:enterprise.soap.sforce.com","compactLayoutName","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldCompactLayoutName(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("compactLayoutName", "urn:enterprise.soap.sforce.com","compactLayoutName","http://www.w3.org/2001/XMLSchema","string",1,1,true), compactLayoutName, compactLayoutName__is_set);
    }

    /**
     * element : recordTypeId of type {urn:enterprise.soap.sforce.com}ID
     * java type: java.lang.String
     */
    private boolean recordTypeId__is_set = false;

    private java.lang.String recordTypeId;

    public java.lang.String getRecordTypeId() {
      return recordTypeId;
    }

    public void setRecordTypeId(java.lang.String recordTypeId) {
      this.recordTypeId = recordTypeId;
      recordTypeId__is_set = true;
    }

    protected void setRecordTypeId(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("recordTypeId", "urn:enterprise.soap.sforce.com","recordTypeId","urn:enterprise.soap.sforce.com","ID",1,1,true))) {
        setRecordTypeId(__typeMapper.readString(__in, _lookupTypeInfo("recordTypeId", "urn:enterprise.soap.sforce.com","recordTypeId","urn:enterprise.soap.sforce.com","ID",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldRecordTypeId(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("recordTypeId", "urn:enterprise.soap.sforce.com","recordTypeId","urn:enterprise.soap.sforce.com","ID",1,1,true), recordTypeId, recordTypeId__is_set);
    }

    /**
     * element : recordTypeName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean recordTypeName__is_set = false;

    private java.lang.String recordTypeName;

    public java.lang.String getRecordTypeName() {
      return recordTypeName;
    }

    public void setRecordTypeName(java.lang.String recordTypeName) {
      this.recordTypeName = recordTypeName;
      recordTypeName__is_set = true;
    }

    protected void setRecordTypeName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("recordTypeName", "urn:enterprise.soap.sforce.com","recordTypeName","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setRecordTypeName(__typeMapper.readString(__in, _lookupTypeInfo("recordTypeName", "urn:enterprise.soap.sforce.com","recordTypeName","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldRecordTypeName(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("recordTypeName", "urn:enterprise.soap.sforce.com","recordTypeName","http://www.w3.org/2001/XMLSchema","string",1,1,true), recordTypeName, recordTypeName__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[RecordTypeCompactLayoutMapping ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldAvailable(__out, __typeMapper);
      writeFieldCompactLayoutId(__out, __typeMapper);
      writeFieldCompactLayoutName(__out, __typeMapper);
      writeFieldRecordTypeId(__out, __typeMapper);
      writeFieldRecordTypeName(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setAvailable(__in, __typeMapper);
      setCompactLayoutId(__in, __typeMapper);
      setCompactLayoutName(__in, __typeMapper);
      setRecordTypeId(__in, __typeMapper);
      setRecordTypeName(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "available", available);
      toStringHelper(sb, "compactLayoutId", compactLayoutId);
      toStringHelper(sb, "compactLayoutName", compactLayoutName);
      toStringHelper(sb, "recordTypeId", recordTypeId);
      toStringHelper(sb, "recordTypeName", recordTypeName);
    }


}
