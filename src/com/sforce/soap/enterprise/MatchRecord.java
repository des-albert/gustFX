package com.sforce.soap.enterprise;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class MatchRecord implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public MatchRecord() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : additionalInformation of type {urn:enterprise.soap.sforce.com}AdditionalInformationMap
     * java type: com.sforce.soap.enterprise.AdditionalInformationMap[]
     */
    private boolean additionalInformation__is_set = false;

    private com.sforce.soap.enterprise.AdditionalInformationMap[] additionalInformation = new com.sforce.soap.enterprise.AdditionalInformationMap[0];

    public com.sforce.soap.enterprise.AdditionalInformationMap[] getAdditionalInformation() {
      return additionalInformation;
    }

    public void setAdditionalInformation(com.sforce.soap.enterprise.AdditionalInformationMap[] additionalInformation) {
      this.additionalInformation = additionalInformation;
      additionalInformation__is_set = true;
    }

    protected void setAdditionalInformation(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("additionalInformation", "urn:enterprise.soap.sforce.com","additionalInformation","urn:enterprise.soap.sforce.com","AdditionalInformationMap",0,-1,true))) {
        setAdditionalInformation((com.sforce.soap.enterprise.AdditionalInformationMap[])__typeMapper.readObject(__in, _lookupTypeInfo("additionalInformation", "urn:enterprise.soap.sforce.com","additionalInformation","urn:enterprise.soap.sforce.com","AdditionalInformationMap",0,-1,true), com.sforce.soap.enterprise.AdditionalInformationMap[].class));
      }
    }

    private void writeFieldAdditionalInformation(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("additionalInformation", "urn:enterprise.soap.sforce.com","additionalInformation","urn:enterprise.soap.sforce.com","AdditionalInformationMap",0,-1,true), additionalInformation, additionalInformation__is_set);
    }

    /**
     * element : fieldDiffs of type {urn:enterprise.soap.sforce.com}FieldDiff
     * java type: com.sforce.soap.enterprise.FieldDiff[]
     */
    private boolean fieldDiffs__is_set = false;

    private com.sforce.soap.enterprise.FieldDiff[] fieldDiffs = new com.sforce.soap.enterprise.FieldDiff[0];

    public com.sforce.soap.enterprise.FieldDiff[] getFieldDiffs() {
      return fieldDiffs;
    }

    public void setFieldDiffs(com.sforce.soap.enterprise.FieldDiff[] fieldDiffs) {
      this.fieldDiffs = fieldDiffs;
      fieldDiffs__is_set = true;
    }

    protected void setFieldDiffs(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("fieldDiffs", "urn:enterprise.soap.sforce.com","fieldDiffs","urn:enterprise.soap.sforce.com","FieldDiff",0,-1,true))) {
        setFieldDiffs((com.sforce.soap.enterprise.FieldDiff[])__typeMapper.readObject(__in, _lookupTypeInfo("fieldDiffs", "urn:enterprise.soap.sforce.com","fieldDiffs","urn:enterprise.soap.sforce.com","FieldDiff",0,-1,true), com.sforce.soap.enterprise.FieldDiff[].class));
      }
    }

    private void writeFieldFieldDiffs(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("fieldDiffs", "urn:enterprise.soap.sforce.com","fieldDiffs","urn:enterprise.soap.sforce.com","FieldDiff",0,-1,true), fieldDiffs, fieldDiffs__is_set);
    }

    /**
     * element : matchConfidence of type {http://www.w3.org/2001/XMLSchema}double
     * java type: double
     */
    private boolean matchConfidence__is_set = false;

    private double matchConfidence;

    public double getMatchConfidence() {
      return matchConfidence;
    }

    public void setMatchConfidence(double matchConfidence) {
      this.matchConfidence = matchConfidence;
      matchConfidence__is_set = true;
    }

    protected void setMatchConfidence(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("matchConfidence", "urn:enterprise.soap.sforce.com","matchConfidence","http://www.w3.org/2001/XMLSchema","double",1,1,true))) {
        setMatchConfidence((double)__typeMapper.readDouble(__in, _lookupTypeInfo("matchConfidence", "urn:enterprise.soap.sforce.com","matchConfidence","http://www.w3.org/2001/XMLSchema","double",1,1,true), double.class));
      }
    }

    private void writeFieldMatchConfidence(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("matchConfidence", "urn:enterprise.soap.sforce.com","matchConfidence","http://www.w3.org/2001/XMLSchema","double",1,1,true), matchConfidence, matchConfidence__is_set);
    }

    /**
     * element : record of type {urn:sobject.enterprise.soap.sforce.com}sObject
     * java type: com.sforce.soap.enterprise.sobject.SObject
     */
    private boolean record__is_set = false;

    private com.sforce.soap.enterprise.sobject.SObject record;

    public com.sforce.soap.enterprise.sobject.SObject getRecord() {
      return record;
    }

    public void setRecord(com.sforce.soap.enterprise.sobject.SObject record) {
      this.record = record;
      record__is_set = true;
    }

    protected void setRecord(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("record", "urn:enterprise.soap.sforce.com","record","urn:sobject.enterprise.soap.sforce.com","sObject",1,1,true))) {
        setRecord((com.sforce.soap.enterprise.sobject.SObject)__typeMapper.readObject(__in, _lookupTypeInfo("record", "urn:enterprise.soap.sforce.com","record","urn:sobject.enterprise.soap.sforce.com","sObject",1,1,true), com.sforce.soap.enterprise.sobject.SObject.class));
      }
    }

    private void writeFieldRecord(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("record", "urn:enterprise.soap.sforce.com","record","urn:sobject.enterprise.soap.sforce.com","sObject",1,1,true), record, record__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[MatchRecord ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldAdditionalInformation(__out, __typeMapper);
      writeFieldFieldDiffs(__out, __typeMapper);
      writeFieldMatchConfidence(__out, __typeMapper);
      writeFieldRecord(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setAdditionalInformation(__in, __typeMapper);
      setFieldDiffs(__in, __typeMapper);
      setMatchConfidence(__in, __typeMapper);
      setRecord(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "additionalInformation", additionalInformation);
      toStringHelper(sb, "fieldDiffs", fieldDiffs);
      toStringHelper(sb, "matchConfidence", matchConfidence);
      toStringHelper(sb, "record", record);
    }


}
